version: ~> 1.0

jobs:
  include:
      - stage: test
        name: "Benchmark"
        env:
          - PYTHON_VERSION: ${BENCHMARK_PYTHON:=3.8}
        workspaces:
          use: conda
        install: skip
        before_script:
          - curl -Ls https://micro.mamba.pm/api/micromamba/linux-64/latest | tar -xvj bin/micromamba
          - eval "$(./bin/micromamba shell hook --shell=bash)"
          - mkdir ~/micromamba
          - micromamba activate
          - micromamba config --set always_yes yes
          - micromamba config --set changeps1 no
          - micromamba config --set channel_priority strict
          - micromamba config --remove channels defaults
          - micromamba config --add channels pcds-tag
          - micromamba config --add channels conda-forge
          # Useful for debugging
          - micromamba info
          - micromamba config list
          - echo "Conda Environment Name':' ${CONDA_ENV_NAME:=testenv}"
          - echo "Conda Requirements':' ${CONDA_REQUIREMENTS:=dev-requirements.txt}"

          # Manage conda environment
          - micromamba create -n ${CONDA_ENV_NAME} python=$PYTHON_VERSION ${CONDA_PACKAGE} ${CONDA_EXTRAS} --file ${CONDA_REQUIREMENTS}
          - micromamba activate ${CONDA_ENV_NAME}
          # Useful for debugging
          - micromamba list
        script:
          - |
            set -e
            if command -v coverage; then
                if [ -f "run_tests.py" ]; then
                    coverage run --concurrency=thread --parallel-mode run_tests.py ${BENCHMARK_COMMAND}
                else
                    coverage run --concurrency=thread --parallel-mode -m pytest ${BENCHMARK_COMMAND}
                fi
                (coverage combine && coverage report | grep -v -e ' 0%') || true
            else
                if [ -f "run_tests.py" ]; then
                    python run_tests.py ${BENCHMARK_COMMAND}
                else
                    python -m pytest ${BENCHMARK_COMMAND}
                fi
            fi
