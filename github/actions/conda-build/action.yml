name: Conda Build

inputs:
  package-name:
    description: "The package name to be built"
    required: true
    type: string
  python-version:
    description: "The Python version to build and test with"
    required: true
    type: string
  recipe-folder:
    default: "conda-recipe/"
    description: "The conda recipe folder"
    required: false
    type: string
  testing-extras:
    default: "pyqt=5 line_profiler<4"
    description: "Extra packages to be installed for testing"
    required: false
    type: string
  ci-extras:
    default: "pip pytest-cov"
    description: "CI-specific packages to be installed"
    required: false
    type: string
  requirements-file:
    default: "dev-requirements.txt"
    description: "Development requirements filename"
    required: false
    type: string
outputs: {}

env:
  MAMBA_ROOT_PREFIX: "~/micromamba"
  QT_QPA_PLATFORM: "offscreen"
  CONDARC_SOURCE: |
    notify_outdated_conda: false
    pkgs_dirs:
      - ~/conda_pkgs_dir
    channels:
      - conda-forge
      - pcds-tag
    add_pip_as_python_dependency: true
    auto_activate_base: true
    auto_update_conda: false
    channel_priority: strict
    always_yes: true
    changeps1: false


# Shell settings notes:
# The following allows for each run step to utilize ~/.bash_profile
# for setting up the per-step initial state.
# --login: a login shell. Source ~/.bash_profile
# -e: exit on first error
# -o pipefail: piped processes are important; fail if they fail
# shell: bash --login -eo pipefail {0}


runs:
  using: "composite"
  steps:
  - uses: actions/checkout@v3
    with:
      fetch-depth: 0

  - name: Check version to be built
    shell: bash --login -eo pipefail {0}
    run: |
      # NOTE: If you run CI on your own fork, you may not have the right version
      # number for the package. Synchronize your tags with the upstream,
      # otherwise cross-dependencies may result in confusing build failure.
      (echo "Package version: $(git describe --tags)" | tee "$GITHUB_STEP_SUMMARY") || \
        echo "::warning::Git tags not found in repository. Build may fail!"

  - name: Check environment variables for issues
    shell: bash --login -eo pipefail {0}
    run: |
      echo "* Conda package to be built: ${{ inputs.package-name }}"
      echo "* Conda 'extras' for CI testing: ${{ inputs.testing-extras }}"
      echo "* General conda packages required for CI testing: ${{ inputs.ci-extras }}"
      echo "* Conda recipe folder: ${{ inputs.recipe-folder }}"
      echo "* Conda requirements file for development: ${{ inputs.requirements-file }}"
      echo "* Micromamba environment root: ${MAMBA_ROOT_PREFIX}"

  - name: Set up micromamba and environment
    shell: bash --login -eo pipefail {0}
    run: |
      cd "$HOME"
      mkdir logs
      curl -Ls https://micro.mamba.pm/api/micromamba/linux-64/latest | tar -xvj "bin/micromamba"
      mkdir micromamba

      echo "Micromamba version: $(bin/micromamba --version)" | tee "$GITHUB_STEP_SUMMARY"
      bin/micromamba shell hook --shell=bash >> ~/.bash_profile

      echo "micromamba activate" >> ~/.bash_profile

  - name: Configure conda for building
    shell: bash --login -eo pipefail {0}
    run: |
      echo "${CONDARC_SOURCE}" > ~/.condarc
      echo "Contents of ~/.condarc:"
      echo "---------------------------"
      cat ~/.condarc
      echo "---------------------------"

  - name: Install boa for mambabuild
    shell: bash --login -eo pipefail {0}
    run: |
      micromamba install boa conda-verify "python=${{ inputs.python-version }}"
      micromamba info

  - name: Check condarc
    shell: bash --login -eo pipefail {0}
    run: |
      cat ~/.condarc

  - name: Check the conda recipe
    shell: bash --login -eo pipefail {0}
    run: |
      echo "Conda Recipe Folder':' ${{ inputs.recipe-folder }}"
      echo "The recipe to be built is as follows:"
      cat "${{ inputs.recipe-folder }}/meta.yaml"

  - name: Build the conda package and create the test environment
    shell: bash --login -eo pipefail {0}
    run: |
      conda mambabuild "${{ inputs.recipe-folder }}" \
        --quiet \
        --output-folder "$HOME/conda-bld" \
        --no-anaconda-upload \
        --python "${{ inputs.python-version }}" \
        --extra-deps "python==${{ inputs.python-version }}" \
        --keep-old-work \
        2>&1 | tee $HOME/logs/mambabuild.txt

  - name: Upload the built package as an artifact
    uses: actions/upload-artifact@v3
    with:
      name: Python ${{ inputs.python-version }} - conda - package
      path: ~/conda-bld
      retention-days: 1

  - name: Use the pre-built test environment
    shell: bash --login -eo pipefail {0}
    run: |
      TEST_ENV_PATH=$(ls -d ${MAMBA_ROOT_PREFIX/#\~/$HOME}/conda-bld/*/*_test_env*)
      echo "The test path should be: ${TEST_ENV_PATH}"

      if [ ! -d "${TEST_ENV_PATH}" ]; then
        echo "Something went wrong finding the test environment path. :("
        find ${MAMBA_ROOT_PREFIX/#\~/$HOME}/conda-bld -type d
        exit 1
      fi

      echo "micromamba activate ${TEST_ENV_PATH}" >> ~/.bash_profile

  - name: Check the conda packages in the test env
    shell: bash --login -eo pipefail {0}
    run: |
      conda list

  - name: Install additional test dependencies
    shell: bash --login -eo pipefail {0}
    run: |
      mamba install ${{ inputs.ci-extras }} ${{ inputs.testing-extras }} --file="${{ inputs.requirements-file }}"

  - name: Run tests
    shell: bash --login -eo pipefail {0}
    run: |
      pytest -v \
        --cov=. \
        --log-file="$HOME/logs/debug_log.txt" \
        --log-format='%(asctime)s.%(msecs)03d %(module)-15s %(levelname)-8s %(threadName)-10s %(message)s' \
        --log-file-date-format='%H:%M:%S' \
        --log-level=DEBUG \
        2>&1 | tee "$HOME/logs/pytest_log.txt"

  - name: After failure
    shell: bash --login -eo pipefail {0}
    if: ${{ failure() }}
    run: |
      # On failure:
      # * Include the conda environment details
      # * Include the pytest log in the step summary (but not in the step output as it's available in the previous step)
      # * Include the debug log in the step output (but not the step summary as it's too verbose)
      (
        echo "## Failure debugging"
        echo "### Conda environment"
        echo "```"
        conda list | egrep -v -e "^#"
        echo "```"

        echo "### Pytest log"
        echo "```python"
        cat "$HOME/logs/pytest_log.txt" || echo "# Pytest log not found?"
        echo "```"
      ) >> "$GITHUB_STEP_SUMMARY"

      echo "## Debug log"
      cat "$HOME/logs/debug_log.txt" || echo "Debug logfile not found?"

  - name: Upload log file artifacts
    uses: actions/upload-artifact@v3
    with:
      name: Python ${{ inputs.python-version }} - conda - testing log
      path: "~/logs"
      retention-days: 30
